version: 2
enable-beta-ecosystems: true
updates:
  - package-ecosystem: "uv"
    directory: "/"
    schedule:
      interval: "daily"
    open-pull-requests-limit: 0
    rebase-strategy: "auto"
    commit-message:
      prefix: "chore(deps): update"
    labels:
    - "dependencies"

# 以下为对话内容：
# 用户：帮我结合代码解释一下这个文件的作用
# Copilot：这个文件是 .github/dependabot.yml，用于配置 GitHub Dependabot 的自动依赖管理功能。结合你的项目结构和代码，解释如下：
# - 作用：自动检测并更新项目依赖，帮助你保持依赖项的最新和安全。
# - 关键配置项说明：
#   - version: 2 —— 配置文件的版本号。
#   - enable-beta-ecosystems: true —— 启用 beta 生态系统支持（如 uv）。
#   - updates: —— 配置需要自动更新的依赖类型。
#     - package-ecosystem: "uv" —— 指定依赖管理工具为 uv（你的项目有 uv.lock 文件，说明用 uv 管理 Python 依赖）。
#     - directory: "/" —— 依赖文件在项目根目录。
#     - schedule: interval: "daily" —— 每天检查依赖更新。
#     - open-pull-requests-limit: 0 —— 不限制 PR 数量（但 0 可能表示不自动开 PR，需注意）。
#     - rebase-strategy: "auto" —— 自动选择 rebase 策略。
#     - commit-message: prefix: "chore(deps): update" —— PR 的提交信息前缀。
#     - labels: ["dependencies"] —— PR 自动加上 dependencies 标签。
# 结合代码和依赖管理方式，这个文件的作用是让 GitHub 自动帮你检测和更新 uv 管理的依赖，减少手动维护依赖的工作量，提高安全性和自动化水平。
#
# 用户：beta 生态系统是是什么？
# Copilot：在 GitHub Dependabot 配置中，beta 生态系统指的是目前还在测试阶段、尚未正式全面支持的依赖管理工具或包管理器。例如你的配置中使用的 uv，就是一种新兴的 Python 依赖管理工具，目前在 Dependabot 里属于 beta 支持。
# 启用 enable-beta-ecosystems: true 后，Dependabot 就可以尝试为这些“测试版”支持的依赖管理工具（如 uv、poetry、pnpm 等）自动检测和更新依赖。正式生态系统则包括 npm、pip、maven 等主流、稳定的依赖管理工具。
